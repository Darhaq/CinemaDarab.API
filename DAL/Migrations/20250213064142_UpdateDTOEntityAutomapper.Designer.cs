// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250213064142_UpdateDTOEntityAutomapper")]
    partial class UpdateDTOEntityAutomapper
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Domain.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AddressId");

                    b.HasIndex("PostalCodeId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Odense",
                            Country = "Denmark",
                            PostalCodeId = 1,
                            Street = "123 Main St"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Copenhagen",
                            Country = "Denmark",
                            PostalCodeId = 2,
                            Street = "456 Elm St"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Aarhus",
                            Country = "Denmark",
                            PostalCodeId = 3,
                            Street = "789 Oak St"
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Comedy"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Drama"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Horror"
                        },
                        new
                        {
                            GenreId = 5,
                            GenreName = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            DurationMinutes = 148,
                            Rating = 8.8m,
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inception"
                        },
                        new
                        {
                            MovieId = 2,
                            DurationMinutes = 152,
                            Rating = 9.0m,
                            ReleaseDate = new DateTime(2008, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dark Knight"
                        },
                        new
                        {
                            MovieId = 3,
                            DurationMinutes = 142,
                            Rating = 9.3m,
                            ReleaseDate = new DateTime(1994, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Shawshank Redemption"
                        },
                        new
                        {
                            MovieId = 4,
                            DurationMinutes = 175,
                            Rating = 9.2m,
                            ReleaseDate = new DateTime(1972, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Godfather"
                        },
                        new
                        {
                            MovieId = 5,
                            DurationMinutes = 88,
                            Rating = 6.2m,
                            ReleaseDate = new DateTime(2000, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Scary Movie"
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.PostalCode", b =>
                {
                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostalCodeId");

                    b.ToTable("PostalCodes");

                    b.HasData(
                        new
                        {
                            PostalCodeId = 1,
                            Name = "12345"
                        },
                        new
                        {
                            PostalCodeId = 2,
                            Name = "67890"
                        },
                        new
                        {
                            PostalCodeId = 3,
                            Name = "13579"
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Content = "Very confusing but great movie!",
                            MovieId = 1,
                            Rating = 8.8m,
                            ReviewDate = new DateTime(2025, 2, 13, 7, 41, 41, 992, DateTimeKind.Local).AddTicks(3360),
                            UserId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            Content = "Heath Ledger was amazing!",
                            MovieId = 2,
                            Rating = 9.0m,
                            ReviewDate = new DateTime(2025, 2, 13, 7, 41, 41, 992, DateTimeKind.Local).AddTicks(3362),
                            UserId = 2
                        },
                        new
                        {
                            ReviewId = 3,
                            Content = "One of the best movies of all time!",
                            MovieId = 3,
                            Rating = 9.3m,
                            ReviewDate = new DateTime(2025, 2, 13, 7, 41, 41, 992, DateTimeKind.Local).AddTicks(3365),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatNumber")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("TheaterHallId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("TheaterHallId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            SeatId = 1,
                            Row = "A",
                            SeatNumber = 1,
                            TheaterHallId = 1
                        },
                        new
                        {
                            SeatId = 2,
                            Row = "A",
                            SeatNumber = 2,
                            TheaterHallId = 1
                        },
                        new
                        {
                            SeatId = 3,
                            Row = "A",
                            SeatNumber = 3,
                            TheaterHallId = 1
                        },
                        new
                        {
                            SeatId = 4,
                            Row = "A",
                            SeatNumber = 4,
                            TheaterHallId = 1
                        },
                        new
                        {
                            SeatId = 5,
                            Row = "A",
                            SeatNumber = 5,
                            TheaterHallId = 1
                        },
                        new
                        {
                            SeatId = 6,
                            Row = "A",
                            SeatNumber = 6,
                            TheaterHallId = 1
                        },
                        new
                        {
                            SeatId = 7,
                            Row = "B",
                            SeatNumber = 1,
                            TheaterHallId = 2
                        },
                        new
                        {
                            SeatId = 8,
                            Row = "B",
                            SeatNumber = 2,
                            TheaterHallId = 2
                        },
                        new
                        {
                            SeatId = 9,
                            Row = "B",
                            SeatNumber = 3,
                            TheaterHallId = 2
                        },
                        new
                        {
                            SeatId = 10,
                            Row = "B",
                            SeatNumber = 4,
                            TheaterHallId = 2
                        },
                        new
                        {
                            SeatId = 11,
                            Row = "B",
                            SeatNumber = 5,
                            TheaterHallId = 2
                        },
                        new
                        {
                            SeatId = 12,
                            Row = "C",
                            SeatNumber = 1,
                            TheaterHallId = 3
                        },
                        new
                        {
                            SeatId = 13,
                            Row = "C",
                            SeatNumber = 2,
                            TheaterHallId = 3
                        },
                        new
                        {
                            SeatId = 14,
                            Row = "C",
                            SeatNumber = 3,
                            TheaterHallId = 3
                        },
                        new
                        {
                            SeatId = 15,
                            Row = "C",
                            SeatNumber = 4,
                            TheaterHallId = 3
                        },
                        new
                        {
                            SeatId = 16,
                            Row = "VP",
                            SeatNumber = 1,
                            TheaterHallId = 4
                        },
                        new
                        {
                            SeatId = 17,
                            Row = "VP",
                            SeatNumber = 2,
                            TheaterHallId = 4
                        },
                        new
                        {
                            SeatId = 18,
                            Row = "VP",
                            SeatNumber = 3,
                            TheaterHallId = 4
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Showtime", b =>
                {
                    b.Property<int>("ShowtimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowtimeId"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShowtimeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TheaterHallId")
                        .HasColumnType("int");

                    b.HasKey("ShowtimeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheaterHallId");

                    b.ToTable("Showtimes");

                    b.HasData(
                        new
                        {
                            ShowtimeId = 1,
                            MovieId = 1,
                            ShowtimeDateTime = new DateTime(2025, 10, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TheaterHallId = 1
                        },
                        new
                        {
                            ShowtimeId = 2,
                            MovieId = 2,
                            ShowtimeDateTime = new DateTime(2025, 10, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            TheaterHallId = 1
                        },
                        new
                        {
                            ShowtimeId = 3,
                            MovieId = 3,
                            ShowtimeDateTime = new DateTime(2025, 10, 2, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TheaterHallId = 3
                        },
                        new
                        {
                            ShowtimeId = 4,
                            MovieId = 4,
                            ShowtimeDateTime = new DateTime(2025, 10, 2, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            TheaterHallId = 4
                        },
                        new
                        {
                            ShowtimeId = 5,
                            MovieId = 5,
                            ShowtimeDateTime = new DateTime(2025, 10, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TheaterHallId = 2
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.TheaterHall", b =>
                {
                    b.Property<int>("TheaterHallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheaterHallId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("TheaterHallId");

                    b.HasIndex("AddressId");

                    b.ToTable("TheaterHalls");

                    b.HasData(
                        new
                        {
                            TheaterHallId = 1,
                            AddressId = 0,
                            Capacity = 150,
                            Name = "Main Hall",
                            RowNumber = 0,
                            SeatId = 0,
                            SeatNumber = 0
                        },
                        new
                        {
                            TheaterHallId = 2,
                            AddressId = 0,
                            Capacity = 100,
                            Name = "Second Hall",
                            RowNumber = 0,
                            SeatId = 0,
                            SeatNumber = 0
                        },
                        new
                        {
                            TheaterHallId = 3,
                            AddressId = 0,
                            Capacity = 50,
                            Name = "Small Hall",
                            RowNumber = 0,
                            SeatId = 0,
                            SeatNumber = 0
                        },
                        new
                        {
                            TheaterHallId = 4,
                            AddressId = 0,
                            Capacity = 20,
                            Name = "VIP Hall",
                            RowNumber = 0,
                            SeatId = 0,
                            SeatNumber = 0
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("ShowtimeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.HasIndex("ShowtimeId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            IsBooked = false,
                            Price = 0m,
                            SeatId = 0,
                            ShowtimeId = 1,
                            UserId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            IsBooked = false,
                            Price = 0m,
                            SeatId = 0,
                            ShowtimeId = 3,
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            IsBooked = false,
                            Price = 0m,
                            SeatId = 0,
                            ShowtimeId = 5,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AddressId = 1,
                            CreateDate = new DateTime(2025, 2, 13, 7, 41, 41, 992, DateTimeKind.Local).AddTicks(3302),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "hashedpassword",
                            PostalCodeId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            AddressId = 2,
                            CreateDate = new DateTime(2025, 2, 13, 7, 41, 41, 992, DateTimeKind.Local).AddTicks(3308),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PasswordHash = "hashedpassword2",
                            PostalCodeId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            AddressId = 3,
                            CreateDate = new DateTime(2025, 2, 13, 7, 41, 41, 992, DateTimeKind.Local).AddTicks(3312),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PasswordHash = "hashedpassword3",
                            PostalCodeId = 3,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("GenresGenreId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("MovieGenres", (string)null);

                    b.HasData(
                        new
                        {
                            GenresGenreId = 1,
                            MoviesMovieId = 1
                        },
                        new
                        {
                            GenresGenreId = 5,
                            MoviesMovieId = 1
                        },
                        new
                        {
                            GenresGenreId = 1,
                            MoviesMovieId = 2
                        },
                        new
                        {
                            GenresGenreId = 3,
                            MoviesMovieId = 2
                        },
                        new
                        {
                            GenresGenreId = 3,
                            MoviesMovieId = 3
                        },
                        new
                        {
                            GenresGenreId = 3,
                            MoviesMovieId = 4
                        },
                        new
                        {
                            GenresGenreId = 4,
                            MoviesMovieId = 5
                        },
                        new
                        {
                            GenresGenreId = 2,
                            MoviesMovieId = 5
                        });
                });

            modelBuilder.Entity("DAL.Models.Domain.Address", b =>
                {
                    b.HasOne("DAL.Models.Domain.PostalCode", "PostalCode")
                        .WithMany()
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("DAL.Models.Domain.Review", b =>
                {
                    b.HasOne("DAL.Models.Domain.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Domain.Seat", b =>
                {
                    b.HasOne("DAL.Models.Domain.TheaterHall", "TheaterHall")
                        .WithMany("Seats")
                        .HasForeignKey("TheaterHallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TheaterHall");
                });

            modelBuilder.Entity("DAL.Models.Domain.Showtime", b =>
                {
                    b.HasOne("DAL.Models.Domain.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.TheaterHall", "TheaterHall")
                        .WithMany("Showtimes")
                        .HasForeignKey("TheaterHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("TheaterHall");
                });

            modelBuilder.Entity("DAL.Models.Domain.TheaterHall", b =>
                {
                    b.HasOne("DAL.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DAL.Models.Domain.Ticket", b =>
                {
                    b.HasOne("DAL.Models.Domain.Seat", "Seat")
                        .WithOne("Ticket")
                        .HasForeignKey("DAL.Models.Domain.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.Showtime", "Showtime")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowtimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("Showtime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Domain.User", b =>
                {
                    b.HasOne("DAL.Models.Domain.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.PostalCode", "PostalCode")
                        .WithMany("Users")
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PostalCode");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("DAL.Models.Domain.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Domain.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Models.Domain.Movie", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Models.Domain.PostalCode", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Models.Domain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Models.Domain.Seat", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DAL.Models.Domain.Showtime", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DAL.Models.Domain.TheaterHall", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("DAL.Models.Domain.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
